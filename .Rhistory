),
conditionalPanel(
condition = "input.defcaus > 0",
fluidRow(
h5(HTML("3 | Quais os principais indicativos do problema? (
amplitude, gravidade, tendência e consequências)"),
style = "text-align: left;",),
tags$div(
style = "position: relative;",
tags$textarea(
id = "textMsgind",
placeholder = "Resposta ...",
rows = 4,
style = "width: 100%; resize: vertical;"
),
div(
style = "text-align: right;",
actionButton('ajudaind', '# Exemplo', class = "transparent-button",
style ="width: 80px")),
div(
style = "text-align: right;",
actionButton('concind', '# Conceito', class = "transparent-button",
style ="width: 80px;"))
),
),
fluidRow(
column(
width = 4.0,
actionButton(
'defind',
'Definido',
type = confbutton$type,
class = confbutton$class,
style = confbutton$style
)
)
),
br(),
fluidRow(
infoBoxOutput(width = 12, "info_boxind")
),
),
conditionalPanel(
condition = "input.defind > 0",
fluidRow(
h5(HTML("4 | Qual o principal objetivo da proposta?"),
style = "text-align: left;",),
tags$div(
style = "position: relative;",
tags$textarea(
id = "textMsgobj",
placeholder = "Resposta ...",
rows = 4,
style = "width: 100%; resize: vertical;"
),
div(
style = "text-align: right;",
actionButton('ajudaobj', '# Exemplo', class = "transparent-button",
style ="width: 80px")),
div(
style = "text-align: right;",
actionButton('concobj', '# Conceito', class = "transparent-button",
style ="width: 80px;"))
),
),
fluidRow(
column(
width = 4.0,
actionButton(
'defobj',
'Definido',
type = confbutton$type,
class = confbutton$class,
style = confbutton$style
)
)
),
br(),
fluidRow(
infoBoxOutput(width = 12, "info_boxobj")
),
),
conditionalPanel(
condition = "input.defobj > 0",
fluidRow(
h5(HTML("5 | Quais os principais resultados e impactos esperados?"),
style = "text-align: left;",),
tags$div(
style = "position: relative;",
tags$textarea(
id = "textMsgres",
placeholder = "Resposta ...",
rows = 4,
style = "width: 100%; resize: vertical;"
),
div(
style = "text-align: right;",
actionButton('ajudares', '# Exemplo', class = "transparent-button",
style ="width: 80px")),
div(
style = "text-align: right;",
actionButton('concres', '# Conceito', class = "transparent-button",
style ="width: 80px;"))
),
),
fluidRow(
column(
width = 4.0,
actionButton(
'defres',
'Definido',
type = confbutton$type,
class = confbutton$class,
style = confbutton$style
)
)
),
br(),
fluidRow(
infoBoxOutput(width = 12, "info_boxres")
),
),
conditionalPanel(
condition = "input.defres > 0",
fluidRow(
h5(HTML("6 | Qual o conjunto de ações necessárias para solução?"),
style = "text-align: left;",),
tags$div(
style = "position: relative;",
tags$textarea(
id = "textMsgsol",
placeholder = "Resposta ...",
rows = 4,
style = "width: 100%; resize: vertical;"
),
div(
style = "text-align: right;",
actionButton('ajudasol', '# Exemplo', class = "transparent-button",
style ="width: 80px")),
div(
style = "text-align: right;",
actionButton('concsol', '# Conceito', class = "transparent-button",
style ="width: 80px;"))
),
),
fluidRow(
column(
width = 4.0,
actionButton(
'defsol',
'Definido',
type = confbutton$type,
class = confbutton$class,
style = confbutton$style
)
)
),
br(),
fluidRow(
infoBoxOutput(width = 12, "info_boxsol")
),
),
conditionalPanel(
condition = "input.defsol > 0",
fluidRow(
h4(HTML("2 <strong> ATORES | AGENDA</strong>"),
style = "text-align: left;",),
br(),
h5(HTML("7 | Qual o público-alvo, os apoiadores e os opositiores da proposta?"),
style = "text-align: left;",),
tags$div(
style = "position: relative;",
tags$textarea(
id = "textMsgpub",
placeholder = "Público-Alvo .. \n Apoiadores .. \n Opositores ..",
rows = 4,
style = "width: 100%; resize: vertical;"
),
div(
style = "text-align: right;",
actionButton('ajudapub', '# Exemplo', class = "transparent-button",
style ="width: 80px")),
div(
style = "text-align: right;",
actionButton('concpub', '# Conceito', class = "transparent-button",
style ="width: 80px;"))
),
),
fluidRow(
column(
width = 4.0,
actionButton(
'defpub',
'Definido',
type = confbutton$type,
class = confbutton$class,
style = confbutton$style
)
)
),
br(),
fluidRow(
infoBoxOutput(width = 12, "info_boxpub")
),
),
conditionalPanel(
condition = "input.defpub > 0",
fluidRow(
h5(HTML("8 | Qual a agenda governamental para proposta?"),
style = "text-align: left;",),
tags$div(
style = "position: relative;",
tags$textarea(
id = "textMsgage",
placeholder = "Poder.. \n Percepção.. \n Potência.. \n Proximidade..",
rows = 4,
style = "width: 100%; resize: vertical;"
),
div(
style = "text-align: right;",
actionButton('ajudaage', '# Exemplo', class = "transparent-button",
style ="width: 80px")),
div(
style = "text-align: right;",
actionButton('concage', '# Conceito', class = "transparent-button",
style ="width: 80px;"))
),
),
fluidRow(
column(
width = 4.0,
actionButton(
'defage',
'Definido',
type = confbutton$type,
class = confbutton$class,
style = confbutton$style
)
)
),
br(),
fluidRow(
infoBoxOutput(width = 12, "info_boxage")
),
),
conditionalPanel(
condition = "input.defage > 0",
fluidRow(
h5(HTML("9 | Quais os fatores necessários para viabilizar a proposta?"),
style = "text-align: left;",),
tags$div(
style = "position: relative;",
tags$textarea(
id = "textMsgfat",
placeholder = "Viabilidade.. \n Aceitação.. \n Custos Toleráveis..",
rows = 4,
style = "width: 100%; resize: vertical;"
),
div(
style = "text-align: right;",
actionButton('ajudafat', '# Exemplo', class = "transparent-button",
style ="width: 80px")),
div(
style = "text-align: right;",
actionButton('concfat', '# Conceito', class = "transparent-button",
style ="width: 80px;"))
),
),
fluidRow(
column(
width = 4.0,
actionButton(
'deffat',
'Definido',
type = confbutton$type,
class = confbutton$class,
style = confbutton$style
)
)
),
br(),
fluidRow(
infoBoxOutput(width = 12, "info_boxfat")
),
),
conditionalPanel(
condition = "input.deffat > 0",
fluidRow(
h5(HTML("10 | Qual o nome da sua política?"),
style = "text-align: left;",),
tags$div(
style = "position: relative;",
tags$textarea(
id = "textMsgnome",
placeholder = "Nome..",
rows = 2,
style = "width: 100%; resize: vertical;"
)
),
),
br(),
br(),
fluidRow(
column(
width = 4.0,
actionButton(
'defnome',
'Definido',
type = confbutton$type,
class = confbutton$class,
style = confbutton$style
)
)
),
),
conditionalPanel(
condition = "input.defnome > 0",
fluidRow(
h3(HTML("<strong>Pronto |</strong> Clique em <strong>Gerar</strong> "),
style = "text-align: left;",),
h3(HTML(" <strong> . . . </strong")),
br(),
h3(HTML("# <strong>Pro | Ponha </strong> Outra Política"),
style = "text-align: left;",),
br(),
actionButton("reiniciar", "Reinicie",
type = confbutton$type,
#class = confbutton$class,
style = confbutton$style
),
tags$script('
$(document).on("shiny:connected", function(event) {
// Ouça o sinal enviado do lado do servidor
Shiny.addCustomMessageHandler("reloadPage", function(message) {
// Recarregue a página quando o sinal for recebido
location.reload();
});
});
')
)
),
),
),
tabPanel("Implementação",
h2("Em construção."),
p("Em construção.")
),
tabPanel("Avaliação",
h2("Em construção."),
p("Em construção.")
)
),
)
))
# Define server logic required to draw a histogram
server <- function(input, output, session) {
## Etapas
observeEvent(input$defprob,{
update_progress("barfix", 10/100)
})
observeEvent(input$defcaus,{
update_progress("barfix", 20/100)
})
observeEvent(input$defind,{
update_progress("barfix", 30/100)
})
observeEvent(input$defobj,{
update_progress("barfix", 40/100)
})
observeEvent(input$defres,{
update_progress("barfix", 50/100)
})
observeEvent(input$defsol,{
update_progress("barfix", 60/100)
})
observeEvent(input$defpub,{
update_progress("barfix", 70/100)
})
observeEvent(input$defage,{
update_progress("barfix", 80/100)
})
observeEvent(input$deffat,{
update_progress("barfix", 90/100)
})
observeEvent(input$defnome,{
update_progress("barfix", 100/100)
})
##Ajuda
textprob <- reactiveVal(NULL)
observeEvent(input$ajudaprob, {
textprob(h5(HTML("Exemplo: Proteção de defensoes de direitos humanos que sofreram ameaças em virtude da sua militância.",
"<br>")))
})
output$info_boxprob <- renderInfoBox({
req(textprob())
infoBox(
input$area,
textprob(),
icon = icon("book"),
color = 'yellow'
)
})
textcaus <- reactiveVal(NULL)
observeEvent(input$ajudacaus, {
textcaus(h5(HTML("Ameaça em decorrência da atuação na defesa de direitos humanos e",
"liberdades universalmente reconhecidas.",
"<br>")))
})
output$info_boxcaus <- renderInfoBox({
req(textcaus())
infoBox(
input$area,
textcaus(),
icon = icon("book"),
color = 'yellow'
)
})
## Função para gerar o PDF
gerarPDF <- function(filename, input) {
# Crie um conteúdo temporário para o R Markdown
rmd_content <- paste0(
"---\n",
"title: '**PRO | POR** Ambiente para Construção Políticas'\n",
"author: '**Resumo da Proposta**'\n",
"output: pdf_document\n",
"---\n\n",
h4(HTML("**Dados Gerais**")),
paste0(
"Política: ", input$textMsgnome, "\n\n",
"Área/Setor: ", input$area, "\n\n",
"Alcance: ", input$escopo, "\n\n",
"Inicativa: ", input$inicia, "\n\n",
"...\n\n",
h4(HTML("**Principais Componentes**")),
"\ \n\n",
h5(HTML("1 | Problema/necessidade"),
style = "text-align: left;"),
# Adicione mais inputs aqui
"\n\n", input$textMsgprob, "\n\n",
"...\n\n",
h5(HTML("2 | Principais causas"),
style = "text-align: left;"),
"\n\n", input$textMsgcaus, "\n\n",
"...\n\n",
h5(HTML("3 | Principais indicativos"),
style = "text-align: left;"),
"\n\n", input$textMsgind, "\n\n",
"...\n\n",
h5(HTML("4 | Principal objetivo"),
style = "text-align: left;"),
"\n\n", input$textMsgobj, "\n\n",
"...\n\n",
h5(HTML("5 | Resultados esperados"),
style = "text-align: left;"),
"\n\n", input$textMsgres, "\n\n",
"...\n\n",
h5(HTML("6 | Solução proposta"),
style = "text-align: left;"),
"\n\n", input$textMsgsol, "\n\n",
"...\n\n",
h5(HTML("7 | Público-alvo, apoiadores e opositiores"),
style = "text-align: left;"),
"\n\n", input$textMsgpub, "\n\n",
"...\n\n",
h5(HTML("8 | Posição na agenda"),
style = "text-align: left;"),
"\n\n", input$textMsgage, "\n\n",
"...\n\n",
h5(HTML("9 | Viabiliade da proposta"),
style = "text-align: left;"),
"\n\n", input$textMsgfat, "\n\n"
# E assim por diante...
)
)
# Crie um arquivo Rmd temporário com o conteúdo
documento_rmd_temp <- tempfile(fileext = ".Rmd")
writeLines(rmd_content, documento_rmd_temp)
# Renderize o R Markdown temporário para PDF
rmarkdown::render(
input = documento_rmd_temp,
output_format = pdf_document(),
output_file = filename
)
}
output$criar <- downloadHandler(
filename = function() {
"documento_personalizado.pdf"  # Nome do arquivo PDF
},
content = function(file) {
gerarPDF(file, input)
}
)
output$gerar <- downloadHandler(
filename = function() {
"documento_personalizado.pdf"  # Nome do arquivo PDF
},
content = function(file) {
gerarPDF(file, input)
}
)
observeEvent(input$reiniciar, {
# Envie um sinal para o lado do servidor
session$sendCustomMessage("reloadPage", TRUE)
})
}
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
